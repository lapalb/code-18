// Write an Efficient Method to Check if a Number is Multiple of 3
1. n%3== 0 ? return true: return false
2. (Sum of digits)%3==0 :return true: return false
3. If (count of odd set bit - count of even set bit)%3 == 0 ? return true: return false'


// Fast Multiplication
Multiply by 7: x>>3 -x
Multiply by 9: x>>3 +x

// Lucky Number
A number is lucky if it is not discarded if we are on a discard mission of every nth number where n Îµ(2,3,4...)
check if it discarded after each pass and next position is calculated via
next_position -= next_position/counter;

//Multiplying two number without product or loop
Use recursion
mul(x,y)
if(y>0)
x+mul(x,y-1)
if(y==0)
return 0
else
-mul(x,-y)

// Fibonacci number
0,1,1,2,3
It can be calculate in o(n) time using DP, to solve it in o(n) time:
{1,1} to power n =f(n+1), f(n)
{1,0}             f(n),  f(n-1)

// Trivia
a^n can be calculated in o(logN) time
